@PACKAGE_INIT@

set(export_config_name "@export_config_name@")

set_and_check(${export_config_name}-targets "${CMAKE_CURRENT_LIST_DIR}/${export_config_name}-targets.cmake")

include(${${export_config_name}-targets})


set(VALHALLA_ENABLE_HTTP @ENABLE_HTTP@)
set(VALHALLA_ENABLE_DATA_TOOLS @ENABLE_DATA_TOOLS@)

set(VALHALLA_VERSION_MAJOR "@VALHALLA_VERSION_MAJOR@")
set(VALHALLA_VERSION_MINOR "@VALHALLA_VERSION_MINOR@")
set(VALHALLA_VERSION_PATCH "@VALHALLA_VERSION_PATCH@")

set(VALHALLA_VERSION "${VALHALLA_VERSION_MAJOR}")
if(NOT "${VALHALLA_VERSION_MINOR}" STREQUAL "")
  set(VALHALLA_VERSION "${VALHALLA_VERSION}.${VALHALLA_VERSION_MINOR}")
  if(NOT "${VALHALLA_VERSION_PATCH}" STREQUAL "")
    set(VALHALLA_VERSION "${VALHALLA_VERSION}.${VALHALLA_VERSION_PATCH}")
  else()
    unset(VALHALLA_VERSION_PATCH)
  endif()
else()
  unset(VALHALLA_VERSION_MINOR)
  unset(VALHALLA_VERSION_PATCH)
endif()


# Find all required packages
include(Find)
include(CMakeFindDependencyMacro)
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules" "${CMAKE_MODULE_PATH}")


# Date
find_header_ex(date date/date.h)
find_header_package_ex(date)

# Dirent
if(MSVC)
  find_header_ex(dirent dirent.h)
  find_header_package_ex(dirent)
endif()

# rapidjson
find_header_ex(rapidjson rapidjson/rapidjson.h)
find_header_package_ex(rapidjson)

# robin hood hashing
find_header_ex(robin_hood robin_hood.h)
find_header_package_ex(robin_hood)

find_package(Threads REQUIRED)

# Protobuf
if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/cmake/protobuf-config.cmake")
  set(protobuf_DIR "${CMAKE_CURRENT_LIST_DIR}/cmake")
else()
  set(protobuf_DIR @protobuf_DIR@)
endif()
if(protobuf_DIR)
  # Use the config written by protobuf
  set(protobuf_MODULE_COMPATIBLE ON CACHE BOOL "" FORCE)
  find_package(protobuf REQUIRED CONFIG)
else()
  find_package(Protobuf REQUIRED)
endif()

if(VALHALLA_ENABLE_HTTP OR VALHALLA_ENABLE_DATA_TOOLS)
  find_package(CURL REQUIRED)
endif()

